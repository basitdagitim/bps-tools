#!/bin/bash

BLUE=$'\e[0;34m'
GREEN=$'\e[0;32m'
RED=$'\e[0;31m'
NC=$'\e[0m'


#*******************************bps_create_package***************************************
# paketin indirilmesi ve /tmp/bps/build konumunda derlenmesi için gerekli dizinler hazırlanır.
initsetup() 
{
	mkdir -p /tmp/bps
	mkdir -p /tmp/bps/build
	cd /tmp/bps/build
	rm -rf ./*
	rm -rf build-${name}-${version}*
	rm -rf ${name}-${version}*
	rm -rf rootfs-${name}-${version}*
	
	if [ -n "${source}" ]
	then
		basedosya=$(basename $source)
		
		#curl -Lk -o $basedosya ${source}
		busybox wget -O $basedosya ${source} 1>/dev/null 2>/dev/null
		dowloadfile=$(ls|head -1)
		filetype=$(file -b --extension $dowloadfile|cut -d'/' -f1)
		
		echo "***********dosya sıkıştırma türü**********:${filetype}"
		if [ ${filetype} == "bz2" ]; then tar -xvf ${dowloadfile}; fi
		if [ ${filetype} == "tar" ]; then tar -xvf ${dowloadfile}; fi
		if [ ${filetype} == "xz" ]; then tar -xvf ${dowloadfile}; fi
		if [ "${filetype}" == "gz" ]; then echo "*****dosya gz ile sıkıştırılmış**"; tar -xvf ${dowloadfile}; fi
		if [ "${filetype}" == "???" ]; then echo "****dosya zip ile sıkıştırılmış****"; unzip  ${dowloadfile}; fi
		rm ${dowloadfile}
		#*********************************************************************************************************
		director=$(find ./* -maxdepth 0 -type d)
		if [ "${director}" != "./${name}-${version}" ]; 
		then 
		
		mv $director ${name}-${version}; 
		fi
	fi
	
	mkdir -p build-${name}-${version}
	mkdir -p rootfs-${name}-${version}
	cp ${dizin}/${paket}/bpsbuild /tmp/bps/build
	cd build-${name}-${version}
}

#paketlenecek dosların listesini tutan file.index dosyası oluşturulur
packageindex() 
{
	rm -rf file.index
	cd /tmp/bps/build/rootfs-${name}-${version}
	find . |while IFS= read file_name; do if [ -f ${file_name} ]; then echo ${file_name:1}>>../file.index; fi done
	find . -type l|while IFS= read file_name; do if [ -L ${file_name} ]; then echo ${file_name:1}>>../file.index; fi done
}

# paket dosyası oluşturulur;
# kurulacak data rootfs.tar.xz, file.index ve bpsbuild dosyaları tek bir dosya olarak tar.gz dosyası olarak  hazırlanıyor.
# tar.gz dosyası olarak hazırlanan dosya bps ismiyle değiştirilip paketimiz hazırlanır.

packagecompress() 
{
cd /tmp/bps/build/rootfs-${name}-${version}
tar -cf ../rootfs.tar ./*
cd /tmp/bps/build/
xz -9 rootfs.tar
tar -cvzf paket-${name}-${version}.tar.gz rootfs.tar.xz file.index bpsbuild
cp paket-${name}-${version}.tar.gz ${dizin}/${paket}/${name}-${version}.bps
}

bps_create_package()
{
paket=$1
dizin=$(pwd)
if [ ! -d ${paket} ]; then echo "Bir paket değil!"; exit; fi
if [ ! -f "${paket}/bpsbuild" ]; then echo "Paket dosyası bulunamadı!"; exit; fi
echo "Paket : $paket"
source ${paket}/bpsbuild
DESTDIR=/tmp/bps/build/rootfs-${name}-${version}
SOURCEDIR=/tmp/bps/build/${name}-${version}
BUILDDIR=/tmp/bps/build/build-${name}-${version}
# fonksiyonlar aşağıdaki sırayla çalışacaktır.
echo "******************** initsetup ******************"; initsetup #bu dosya içindeki fonksiyon

echo "******************** setup **********************"; setup #bpsbuild dosyasından gelen fonksiyon
echo "******************** build **********************"; build #bpsbuild dosyasından gelen fonksiyon
echo "******************** package ********************"; package #bpsbuild dosyasından gelen fonksiyon
echo "******************** packageindex****************"; packageindex #bu dosya içindeki fonksiyon
echo "*******************packagecompress***************"; packagecompress #bu dosya içindeki fonksiyon

}

#**************************************bps_update************************************
bps_update()
{
echo "********** Paket Listesi Güncelleniyor **********"
busybox wget -O /tmp/index.lst https://basitdagitim.github.io/binary-package/index.lst 1>/dev/null 2>/dev/null
echo "********** Paket Listesi Güncellendi **********"

}

#************************************bps_find_package_detail**************************************
bps_find_package_detail()
{
paket=$1
paketname="name=\"${paket}\""
#echo "$paket"
indexpaket=$(cat /tmp/index.lst|grep $paketname)
name=""
version=""
depends=""
if [ -n "${indexpaket}" ]
then
	namex=$(echo $indexpaket|cut -d":" -f1)
	versionx=$(echo $indexpaket|cut -d":" -f2)
	dependsx=$(echo $indexpaket|cut -d":" -f3)
	name=${namex:6:-1}
	version=${versionx:9:-1}
	depends=${dependsx:9:-1}
else
	#echo "***********${paket} Paket Bulunamadı**********"
	return
fi
echo "$name,$version,$depends"
}
#************************************pakage_install**************************************
pakage_install()
{
IFS=',' read -r -a array <<< $(bps_find_package_detail $1)
name=${array[0]}
version=${array[1]}
depends=${array[@]:2}
if [ -n "${name}" ]
then

	echo "********** ${GREEN} ${name}-${version} Paketi Kuruluyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi

#echo "********** ${depends} depends Kuruluyor **********"
#return
# paketi indirme
mkdir -p /tmp/bps/kur
rm -rf /tmp/bps/kur/*
busybox wget -O /tmp/bps/kur/${name}-${version}.tar.gz https://github.com/basitdagitim/binary-package/raw/master/${name}/${name}-${version}.bps 1>/dev/null 2>/dev/null

busybox mkdir -p /var/lib/bps
busybox touch /var/lib/bps/index.lst
#busybox cd /tmp/bps/kur/

# paketi açma
busybox tar -xf /tmp/bps/kur/${name}-${version}.tar.gz -C /tmp/bps/kur/
#busybox mkdir -p rootfs
busybox tar -xf /tmp/bps/kur/rootfs.tar.xz -C /

# paketi kurma
#busybox cp -prfv rootfs/* $ROOTFS/ 1>/dev/null 2>/dev/null

#eğer daha kurulmuşsa kayıt siliniyor
busybox sed -i "/name=\"${paket}\"/d" /var/lib/bps/index.lst
#name version depends /var/bps/index.lst eklenmesi
echo "name=\"${name}\":"version=\"${version}\":"depends=\"${depends}\"">>/var/lib/bps/index.lst
#paket içinde gelen paket dosyalarının dosya ve dizin yapısını tutan file index dosyanının /var/bps/ konumuna kopyalanması
busybox cp /tmp/bps/kur/file.index /var/lib/bps/${name}-${version}.lst
# sistem guncelleniyor
ldconfig
echo "********** $name Paketi Kuruldu **********"
}




#**********************************depens_install_find****************************************
depens_install_find()
{

IFS=',' read -r -a array <<< "$1"
for itempaketname in "${array[@]}"
do

paketname="name=\"${itempaketname}\""
depens_paketname=$(cat /tmp/index.lst|grep $paketname)
depends=""
if [ -n "${depens_paketname}" ]
then
	dependsx=$(echo $depens_paketname|cut -d":" -f3)
	depends=${dependsx:9:-1}
fi
	
	#echo "$itempaketname ----> $depends"
	
	IFS=',' read -r -a sub_depends <<< "$depends"
	for subpaketname in "${sub_depends[@]}"
	do
	#echo "alt bağımılılıklar $subpaketname"
	
		IFS=',' read -r -a sub_dependslist <<< "$INSTALL_DEPENDS"
		if [[ ! $(echo ${sub_dependslist[@]} | grep -F $subpaketname) ]]
		then
		
			if [ ${#INSTALL_DEPENDS[@]} -eq 0 ]; then
		    		#echo "The array is empty"
		    		INSTALL_DEPENDS="${itempaketname},${subpaketname}"
			else
		    		#echo "The array is not empty"
		    		INSTALL_DEPENDS="${INSTALL_DEPENDS},${subpaketname}"
			fi
	 	fi
		
	depens_install_find $subpaketname
	done
	
done
#echo $INSTALL_DEPENDS
}
#***********************************pakage_remove***************************************
pakage_remove()
{
IFS=',' read -r -a array <<< $(bps_find_package_detail $1)
paket=${array[0]} #name
version=${array[1]}
depends=${array[@]:2}
if [ -n "${paket}" ]
then

	echo "********** ${GREEN} ${paket}-${version} Paketi Kaldırılıyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi
#return 
 
# Paketin file.lst dosyası içerisindeki dosyalar, dizinler kaldırılır.
cat /var/lib/bps/${paket}-${version}.lst | while read dosya ; do
	if [[ -f "$dosya" ]] ; then 
		rm -f "$dosya"; 
	fi
done

cat /var/lib/bps/${paket}-${version}.lst  | while read dizin ; do
	if [[ -d "$dizin" ]] ; then
		rmdir "$dizin" || true
	fi
done


#/var/bps/paket-version.lst dosyasından paket bilgisi kaldırılır.
rm -f /var/lib/bps/${paket}-${version}.lst

#/var/lib/bps/index.lst dosyasından ilgili paket satırı kaldırılır.
sed -i "/name=\"${paket}\"/d" /var/lib/bps/index.lst
# sistem guncelleniyor
ldconfig
echo "********** $name Paketi Kaldırıldı **********"

}


#*************************************depens_remove_find*************************************
depens_remove_find()
{

IFS=',' read -r -a array <<< "$1"
for itempaketname in "${array[@]}"
do
paketname="name=\"${itempaketname}\""
depens_paketname=$(cat /tmp/index.lst|grep $paketname)
depends=""
if [ -n "${depens_paketname}" ]
then
	dependsx=$(echo $depens_paketname|cut -d":" -f3)
	depends=${dependsx:9:-1}
fi
	
	echo "$itempaketname ----> $depends"
	
	IFS=',' read -r -a sub_depends1 <<< "$depends"
	IFS=',' read -r -a sub_depends2 <<< "$depends"
	for subpaketname1 in "${sub_depends1[@]}"
	do
	#echo "$subpaketname1 ******************************************************"
	found="0"
		for subpaketname2 in "${sub_depends2[@]}"
		do
			if [ "${subpaketname1}" != "${subpaketname2}" ]
			then
				sub_paketname="name=\"${subpaketname2}\""
				sub_depens_paketname=$(cat /tmp/index.lst|grep $sub_paketname)
				sub_depends=""
				if [ -n "${depens_paketname}" ]
				then
					sub_dependsx=$(echo $sub_depens_paketname|cut -d":" -f3)
					sub_depends=${sub_dependsx:9:-1}
				fi
				IFS=',' read -r -a sub_sub_depends <<< "$sub_depends"
				if [[  $(echo ${sub_sub_depends[@]} | grep -F ${subpaketname1}) ]]
				then
					found="1"
				fi
				
				#echo "$subpaketname2---> $sub_depends"
			
			fi
		done
		if [ "${found}" == "0" ]
		then
			#echo "silinecek....... $subpaketname1"
			#echo "kurulum paket bağımlılıkları son kontrol edilecek"
			if [ ${#REMOVE_DEPENDS[@]} -eq 0 ]; then
		    		#echo "The array is empty"
		    		REMOVE_DEPENDS="${itempaketname},${subpaketname1}"
			else
		    		#echo "The array is not empty"
		    		REMOVE_DEPENDS="${REMOVE_DEPENDS},${subpaketname1}"
			fi
		fi
		
	done
	
done
#echo $REMOVE_DEPENDS
}


#*********************************bps_install*****************************************

bps_install()
{
INSTALL_DEPENDS=""
INSTALL_DEPENDS="${1}" #ilk paket kendisi
depens_install_find "$1"
echo "Kurulacak Paketler: $INSTALL_DEPENDS"

IFS=',' read -r -a packagearray <<< $INSTALL_DEPENDS
for itempaketname in "${packagearray[@]}"
do
#echo "$itempaketname"
pakage_install "$itempaketname"
done


}

bps_reinstall()
{
echo "Tekrar Kurulacak Paket: $1"
}
# ******************************bps_remove*******************************************
bps_remove()
{
#declare -a REMOVE_DEPENDS
#depens_remove_find "$1"
#echo "Kaldırılacak Paketler: $REMOVE_DEPENDS"
#IFS=',' read -r -a packagearray <<< $REMOVE_DEPENDS
#for itempaketname in "${packagearray[@]}"
#do
#echo "$itempaketname"
#pakage_remove "$itempaketname"
#done
pakage_remove "$1"
}

#************************************bps_help************************************************
bps_help()
{
     echo "Usage: bps <options>"
     echo " -u,  --update		: package index update"
     echo " -c,  --create		: create bps package"
     echo " -i,  --install		: package install"
     #echo " -ri, --reinstall	: package re-install"
     echo " -r,  --remove 		: package remove"
     echo " -h,  --help   		: bps help"

}

#***************************************main********************************************************
for arg in $@ ; do
    if [[ "$arg" == "--update" || "$arg" == "-u" ]] ; then
        bps_update
     elif [[ "$arg" == "--create" || "$arg" == "-c" ]] ; then
        bps_create_package $2
    elif [[ "$arg" == "--install" || "$arg" == "-i" ]] ; then
        bps_install $2
    elif [[ "$arg" == "--remove" || "$arg" == "-r" ]] ; then
        bps_remove $2
    elif [[ "$arg" == "--help" || "$arg" == "-h" ]] ; then
        bps_help
      fi
done
