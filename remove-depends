#!/bin/bash
#declare -a All_DEPENDS
BLUE=$'\e[0;34m'
GREEN=$'\e[0;32m'
RED=$'\e[0;31m'
NC=$'\e[0m'


bps_find_package_detail()
{
paket=$1
paketname="name=\"${paket}\""
#echo "$paket"
indexpaket=$(cat /tmp/index.lst|grep $paketname)
name=""
version=""
depends=""
if [ -n "${indexpaket}" ]
then
	namex=$(echo $indexpaket|cut -d":" -f1)
	versionx=$(echo $indexpaket|cut -d":" -f2)
	dependsx=$(echo $indexpaket|cut -d":" -f3)
	name=${namex:6:-1}
	version=${versionx:9:-1}
	depends=${dependsx:9:-1}
else
	#echo "***********${paket} Paket Bulunamadı**********"
	return
fi
echo "$name,$version,$depends"
}

pakage_remove()
{
IFS=',' read -r -a array <<< $(bps_find_package_detail $1)
paket=${array[0]} #name
version=${array[1]}
depends=${array[@]:2}
if [ -n "${paket}" ]
then

	echo "********** ${GREEN} ${paket}-${version} Paketi Kaldırılıyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi
return 
 
# Paketin file.lst dosyası içerisindeki dosyalar, dizinler kaldırılır.
cat /var/lib/bps/${paket}-${version}.lst | while read dosya ; do
	if [[ -f "$dosya" ]] ; then 
		rm -f "$dosya"; 
	fi
done

cat /var/lib/bps/${paket}-${version}.lst  | while read dizin ; do
	if [[ -d "$dizin" ]] ; then
		rmdir "$dizin" || true
	fi
done


#/var/bps/paket-version.lst dosyasından paket bilgisi kaldırılır.
rm -f /var/lib/bps/${paket}-${version}.lst

#/var/lib/bps/index.lst dosyasından ilgili paket satırı kaldırılır.
sed -i "/name=\"${paket}\"/d" /var/lib/bps/index.lst
# sistem guncelleniyor
ldconfig

}



depens_remove_find()
{

IFS=',' read -r -a array <<< "$1"
for itempaketname in "${array[@]}"
do
paketname="name=\"${itempaketname}\""
depens_paketname=$(cat /tmp/index.lst|grep $paketname)
depends=""
if [ -n "${depens_paketname}" ]
then
	dependsx=$(echo $depens_paketname|cut -d":" -f3)
	depends=${dependsx:9:-1}
fi
	
	echo "$itempaketname ----> $depends"
	
	IFS=',' read -r -a sub_depends1 <<< "$depends"
	IFS=',' read -r -a sub_depends2 <<< "$depends"
	for subpaketname1 in "${sub_depends1[@]}"
	do
	#echo "$subpaketname1 ******************************************************"
	found="0"
		for subpaketname2 in "${sub_depends2[@]}"
		do
			if [ "${subpaketname1}" != "${subpaketname2}" ]
			then
				sub_paketname="name=\"${subpaketname2}\""
				sub_depens_paketname=$(cat /tmp/index.lst|grep $sub_paketname)
				sub_depends=""
				if [ -n "${depens_paketname}" ]
				then
					sub_dependsx=$(echo $sub_depens_paketname|cut -d":" -f3)
					sub_depends=${sub_dependsx:9:-1}
				fi
				IFS=',' read -r -a sub_sub_depends <<< "$sub_depends"
				if [[  $(echo ${sub_sub_depends[@]} | fgrep -w ${subpaketname1}) ]]
				then
					found="1"
				fi
				
				#echo "$subpaketname2---> $sub_depends"
			
			fi
		done
		if [ "${found}" == "0" ]
		then
			#echo "silinecek....... $subpaketname1"
			#echo "kurulum paket bağımlılıkları son kontrol edilecek"
			if [ ${#REMOVE_DEPENDS[@]} -eq 0 ]; then
		    		#echo "The array is empty"
		    		REMOVE_DEPENDS="${itempaketname},${subpaketname1}"
			else
		    		#echo "The array is not empty"
		    		REMOVE_DEPENDS="${REMOVE_DEPENDS},${subpaketname1}"
			fi
		fi
		
	done
	
done
#echo $REMOVE_DEPENDS
}

declare -a REMOVE_DEPENDS
depens_remove_find "gcc"
echo "Kaldırılacak Paketler: $REMOVE_DEPENDS"
IFS=',' read -r -a packagearray <<< $REMOVE_DEPENDS
for itempaketname in "${packagearray[@]}"
do
#echo "$itempaketname"
pakage_remove "$itempaketname"
done

