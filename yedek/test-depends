#!/bin/bash
#declare -a All_DEPENDS
BLUE=$'\e[0;34m'
GREEN=$'\e[0;32m'
RED=$'\e[0;31m'
NC=$'\e[0m'


bps_find_package_detail()
{
paket=$1
paketname="name=\"${paket}\""
#echo "$paket"
indexpaket=$(cat /tmp/index.lst|grep $paketname)
name=""
version=""
depends=""
if [ -n "${indexpaket}" ]
then
	namex=$(echo $indexpaket|cut -d":" -f1)
	versionx=$(echo $indexpaket|cut -d":" -f2)
	dependsx=$(echo $indexpaket|cut -d":" -f3)
	name=${namex:6:-1}
	version=${versionx:9:-1}
	depends=${dependsx:9:-1}
else
	#echo "***********${paket} Paket Bulunamadı**********"
	return
fi
echo "$name,$version,$depends"
}

pakage_install()
{
IFS=',' read -r -a array <<< $(bps_find_package_detail $1)
name=${array[0]}
version=${array[1]}
depends=${array[@]:2}
if [ -n "${name}" ]
then

	echo "********** ${GREEN} ${name}-${version} Paketi Kuruluyor  ${NC} **********"

else
	echo "***********${RED} ${1}  Paket Bulunamadı ${NC} **********"
	return
fi

#echo "********** ${depends} depends Kuruluyor **********"
return
# paketi indirme
mkdir -p /tmp/bps/kur
rm -rf /tmp/bps/kur/*
busybox wget -O /tmp/bps/kur/${name}-${version}.tar.gz https://github.com/basitdagitim/binary-package/raw/master/${name}/${name}-${version}.bps 1>/dev/null 2>/dev/null
mkdir -p /var/lib/bps
touch /var/lib/bps/index.lst
cd /tmp/bps/kur/

# paketi açma
tar -xf ${name}-${version}.tar.gz
mkdir -p rootfs
tar -xf rootfs.tar.xz -C rootfs
# paketi kurma
cp -prfv rootfs/* $ROOTFS/ 1>/dev/null 2>/dev/null

#eğer daha kurulmuşsa kayıt siliniyor
sed -i "/name=\"${name}\"/d" /var/lib/bps/index.lst
#name version depends /var/bps/index.lst eklenmesi
echo "name=\"${name}\":"version=\"${version}\":"depends=\"${depends}\"">>/var/lib/bps/index.lst
#paket içinde gelen paket dosyalarının dosya ve dizin yapısını tutan file index dosyanının /var/bps/ konumuna kopyalanması
cp file.index /var/lib/bps/${name}-${version}.lst  1>/dev/null 2>/dev/null
# sistem guncelleniyor
ldconfig
echo "********** $name Paketi Kuruldu **********"
}



depens_install_find()
{

IFS=',' read -r -a array <<< "$1"
for itempaketname in "${array[@]}"
do
paketname="name=\"${itempaketname}\""
depens_paketname=$(cat /tmp/index.lst|grep $paketname)
depends=""
if [ -n "${depens_paketname}" ]
then
	dependsx=$(echo $depens_paketname|cut -d":" -f3)
	depends=${dependsx:9:-1}
fi
	
	#echo "$itempaketname ----> $depends"
	
	IFS=',' read -r -a sub_depends <<< "$depends"
	for subpaketname in "${sub_depends[@]}"
	do
	#echo "alt bağımılılıklar $subpaketname"
	
		IFS=',' read -r -a sub_dependslist <<< "$INSTALL_DEPENDS"
		if [[ ! $(echo ${sub_dependslist[@]} | fgrep -w $subpaketname) ]]
		then
		
			if [ ${#All_DEPENDS[@]} -eq 0 ]; then
		    		#echo "The array is empty"
		    		INSTALL_DEPENDS="${itempaketname},${subpaketname}"
			else
		    		#echo "The array is not empty"
		    		INSTALL_DEPENDS="${INSTALL_DEPENDS},${subpaketname}"
			fi
	 	fi
		
	depens_install_find $subpaketname
	done
	
done
#echo $INSTALL_DEPENDS
}

depens_remove_find()
{

IFS=',' read -r -a array <<< "$1"
for itempaketname in "${array[@]}"
do
paketname="name=\"${itempaketname}\""
depens_paketname=$(cat /tmp/index.lst|grep $paketname)
depends=""
if [ -n "${depens_paketname}" ]
then
	dependsx=$(echo $depens_paketname|cut -d":" -f3)
	depends=${dependsx:9:-1}
fi
	
	echo "$itempaketname ----> $depends"
	
	IFS=',' read -r -a sub_depends1 <<< "$depends"
	IFS=',' read -r -a sub_depends2 <<< "$depends"
	

	for subpaketname1 in "${sub_depends1[@]}"
	do
	found="0"
	#****************************************************************************
	sayi=$(cat /tmp/index.lst|grep $subpaketname1|wc -l)
	declare -a INSTALL_DEPENDS=""
	depens_install_find "${subpaketname1}"
	echo "$sayi--${subpaketname1} Kurulacak Paketler:****************************: $INSTALL_DEPENDS"
	if [[ $sayi == 1 ]]
	then
	
	echo "Başka Paketlere Bağımlı Değil..........................."
	found="2"
	#continue
	fi
	if [[ $sayi == 2 ]]
	then
	
	echo "Başka Paketlere Bağımlı Değil..........................."
	found="2"
	#continue
	fi
	#****************************************************************************
	
		for subpaketname2 in "${sub_depends2[@]}"
		do
			if [[ $found == "2" ]]
			then
			
				continue
			fi
			#********************************************************************************
			if [ "${subpaketname1}" != "${subpaketname2}" ]
			then
				#****************************************************************************
				declare -a INSTALL_DEPENDS=""
				depens_install_find "${subpaketname2}"
				echo "${subpaketname2} Kurulacak Paketler: $INSTALL_DEPENDS"
				#****************************************************************************
				
				IFS=',' read -r -a sub_sub_depends <<< "$INSTALL_DEPENDS"
				if [[  $(echo ${sub_sub_depends[@]} | fgrep -w ${subpaketname1}) ]]
				then
					found="1"
				fi
				
				#echo "$subpaketname2---> $sub_depends"
			
			fi
		done
		if [[ "${found}" == "0" ]] || [[ "${found}" == "2" ]]
		then
			#echo "silinecek....... $subpaketname1"
			echo "kurulum paket bağımlılıkları son kontrol edilecek"
			if [ ${#REMOVE_DEPENDS[@]} -eq 0 ]; then
		    		#echo "The array is empty"
		    		REMOVE_DEPENDS="${itempaketname},${subpaketname1}"
			else
		    		#echo "The array is not empty"
		    		REMOVE_DEPENDS="${REMOVE_DEPENDS},${subpaketname1}"
			fi
		fi
		
	done
	
done
#echo $REMOVE_DEPENDS
}

declare -a REMOVE_DEPENDS
depens_remove_find "gcc"
echo "Kaldırılacak Paketler: $REMOVE_DEPENDS"
IFS=',' read -r -a packagearray <<< $REMOVE_DEPENDS
for itempaketname in "${packagearray[@]}"
do
#echo "$itempaketname"
pakage_install "$itempaketname"
done

